#!/bin/bash
[ -r lcy.cfg ] || cat >lcy.cfg <<-EOF
	nick=lcy
	server=raspberrypi
	port=6667
	chans=( "#brgtest" )
	pass=123456
EOF

source lcy.cfg

# Basic helpers for communication with via IRC protocol
recv() {
	echo "< $@" >&2;
}
send() {
	echo "> $@" >&2;
	printf "%s\r\n" "$@" >&3;
}
export -f send

declare -A filters
reload_filters() {
	for i in "${!filters[@]}"; do
		unset "filters[$i]"
	done
	for f in filters/*; do
		source "$f"
	done
}

filter() {
	filters["$1"]+="${@:2}"
}
export -f filter

run_filters() {
	for f in "${!filters[@]}"; do
		if [[ "${@,,}" =~ "${f,,}" ]]; then
			for func in ${filters[$f]}; do
				$func "${BASH_REMATCH[@]}"
			done
		fi
	done
}

reload_filters

declare -A builtin_commands

builtin_commands[refresh]=reload_filters

bashbot_args=("$0" "$@")

# We'll also allow for SIGHUP to reload bashbot. Useful for git hooks.
[ -e lcy.pid ] && rm lcy.pid
echo $$ >lcy.pid
trap 'builtin_reload' SIGHUP

exec 3<>/dev/tcp/$server/$port || { echo "Connection failed"; exit 1; }

send "NICK $nick"
send "USER $nick 0 * :DrWeissbot"
sleep 3
send "PRIVMSG NickServ :IDENTIFY $pass"
send "PRIVMSG HostServ OFF"

for chan in "${chans[@]}"; do
	sleep 3
	send "JOIN :$chan"
done

CHANNEL=
NAME=
HOST=
BOTNICK=$nick
export CHANNEL NAME BOTNICK HOST

while read -r line; do

	# strip trailing carriage return
	line=${line%%$'\r'}

	recv "$line"
	set -- $line

	case "$1" in
		:*)
		HOST=$1
		# turn: :nickname!example.host.com
		# into: nickname
		NAME=${1%%!*}
		NAME=${NAME#:}
		shift
		;;
	esac

	# Before anything else: Check if message / command is ok
	CHANNEL=${2#:}
	cmd/safety "$@"

	case "$@" in
		"PING "*)
		send "PONG $2"
		continue
		;;
		"PRIVMSG $nick :"*)
		# private message to bot
		CHANNEL=$NAME
		prefix="PRIVMSG $NAME "
		set -- "${3#:}" "${@:4}"
		;;
		"PRIVMSG "*" :$nick: "*)
		CHANNEL=$2
		prefix="PRIVMSG $CHANNEL :$NAME"
		set -- "${@:4}"
		;;
		"PRIVMSG "*" :"*)
		CHANNEL=$2
		run_filters "${3#:}" "${@:4}" | while IFS= read -r line; do
			send "PRIVMSG $CHANNEL :$line"
		done&
		continue
		;;
		*)
		continue
		;;
	esac

	# prevent tricky commands like '../../../shutdown'
	cmd=${1##*/}
	shift

	# reload is handled specially.  we can't leave the | while read subshell
	# hangin' during re-exec, or it will be orphaned
	case "$cmd" in
		reload)
		builtin_reload "$@"
		continue
		;;
	esac

	# note, builtin commands run in-process
	if [ -n "${builtin_commands[$cmd]}" ]; then
		"${builtin_commands[$cmd]}" "$@"
		continue
	elif [ -x "query/$cmd" ]; then
		"query/$cmd" "$@"
	else
		"query/insult"
	fi | while IFS= read -r line; do
		send "$prefix:$line"
	done&

done <&3
